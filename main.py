import aiogram
from aiogram import Bot, Dispatcher, executor, types
import config as cfg
import logging
import markups as nav
import asyncio
import time
import datetime


logging.basicConfig(level=logging.INFO, filename='bot.log', filemode='w', format='%(asctime)s - %(levelname)s - %(message)s')

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

date_object = datetime.date.today()


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é - @efstas.")

@dp.message_handler(commands=["user_id"])
async def send_message(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(user_id,f'User ID: {message.from_user.id}')

@dp.message_handler(commands=["stop_words"])
async def stopwords(message: types.Message):
    words_list = "\n".join(cfg.WORDS)
    await bot.send_message(message.from_user.id, f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–¥–∞–ª—è—é —Å–ª–æ–≤–∞:\n\n{words_list}')


def check_chat_member(chat_member):
    return chat_member['status'] != "left"


@dp.message_handler(content_types=['left_chat_member'])
async def delete_message_new_left(message: types.Message):
    await message.delete()


@dp.message_handler(content_types=["new_chat_members"])
async def user_joined(message: types.Message):
    await message.delete()
    for user in message.new_chat_members:
        await bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time()+60)
        msg = await message.answer(f' –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name} (@{user.username}) !\n'
                            "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @es_blog\n\n"
                            "–£ —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º :)\n\n"
                            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: youtube.com/esblog  & instagram.com/es_blogde \n\n", reply_markup=nav.channelMenu)
        await asyncio.sleep(60)
        await msg.delete()


@dp.message_handler()
async def mess_handler(message: types.Message):
    if check_chat_member(await bot.get_chat_member(chat_id=cfg.CHANNEL_ID, user_id=message.from_user.id)):
        for word in cfg.WORDS:
            if word in message.text:
                await bot.send_message(chat_id=241943423, text=f'‚ùó –î–∞—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è - {date_object}\n\n'
                                                           f'–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: @{message.from_user.username}\n'
                                                           f'ID –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: ID{message.from_user.id}\n')
                await message.forward(chat_id=241943423, disable_notification=True)
                await message.delete()
                message_stopwords = await message.answer(f'üëÆüèº‚ôÇÔ∏è –ü—Ä–∏—à–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–º –±—ã–ª–∏ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞...')
                await asyncio.sleep(120)
                await message_stopwords.delete()
            else:
                pass
    else:
        await bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time() + 60)
        await message.delete()
        message_no_chat_member = await message.answer(f'@{message.from_user.username}, '
                                                      "—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @es_blog\n\n"
                                                      "–£ —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º :)\n\n"
                                                      "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: youtube.com/esblog  & instagram.com/es_blogde \n\n",
                                                      reply_markup=nav.channelMenu)
        await asyncio.sleep(60)
        await message_no_chat_member.delete()


if __name__ == "__main__":
    print("bot go go go")
    executor.start_polling(dp, skip_updates=True)
