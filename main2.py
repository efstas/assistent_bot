import aiogram
from aiogram import Bot, Dispatcher, executor, types
import config as cfg
import logging
import markups as nav
import asyncio
import time
import datetime


logging.basicConfig(level=logging.INFO, filename='bot.log', filemode='w', format='%(asctime)s - %(levelname)s - %(message)s')

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)

date_object = datetime.date.today()


def is_admin(user_id):
    return str(user_id) == "241943423"  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç ID 241943423, –∏–Ω–∞—á–µ False

@dp.message_handler(commands=["bot_log"])
async def get_bot_log(message: types.Message):
    if is_admin(message.from_user.id):
        try:
            with open("bot.log", "r") as log_file:
                log_text = log_file.read()
            await bot.send_message(message.from_user.id, log_text)
        except FileNotFoundError:
            await bot.send_message(message.from_user.id, "–§–∞–π–ª bot.log –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def read_stop_words():
    try:
        with open("stop_words.txt", "r") as file:
            words = [word.strip() for word in file.readlines()]
    except FileNotFoundError:
        words = []
    return words


def load_stop_words():
    with open("stop_words.txt", "r") as file:
        return [line.strip() for line in file]


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é - @efstas.")


@dp.message_handler(commands=["user_id"])
async def send_message(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(user_id,f'User ID: {message.from_user.id}')

@dp.message_handler(commands=["stop_words"])
async def stopwords(message: types.Message):
    if is_admin(message.from_user.id):
        stop_words_list = "\n".join(load_stop_words())
        await bot.send_message(message.from_user.id, f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–¥–∞–ª—è—é —Å–ª–æ–≤–∞:\n\n{stop_words_list}')
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@dp.message_handler(commands=["add_word"])
async def add_word(message: types.Message):
    if is_admin(message.from_user.id):
        text = message.get_args()
        if text:
            with open("stop_words.txt", "a") as file:
                file.write(text + "\n")
            await message.answer(f'–°–ª–æ–≤–æ "{text}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ stop_words.')
        else:
            await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ stop_words.")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def check_chat_member(chat_member):
    return chat_member['status'] != "left"


@dp.message_handler(content_types=['left_chat_member'])
async def delete_message_new_left(message: types.Message):
    await message.delete()


@dp.message_handler(content_types=["new_chat_members"])
async def user_joined(message: types.Message):
    await message.delete()
    for user in message.new_chat_members:
        await bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time()+60)
        msg = await message.answer(f' –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name} (@{user.username}) !\n'
                            "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @es_blog\n\n"
                            "–£ —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º :)\n\n"
                            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: youtube.com/esblog  & instagram.com/es_blogde \n\n", reply_markup=nav.channelMenu)
        await asyncio.sleep(60)
        await msg.delete()

@dp.message_handler()
async def mess_handler(message: types.Message):
    stop_words = load_stop_words()
    if check_chat_member(await bot.get_chat_member(chat_id=cfg.CHANNEL_ID, user_id=message.from_user.id)):
        for word in stop_words:
            if word in message.text:
                await bot.send_message(chat_id=cfg.ADMIN_ID, text=f'‚ùó –î–∞—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è - {date_object}\n\n'
                                                                  f'–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: @{message.from_user.username}\n'
                                                                  f'ID –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: ID{message.from_user.id}\n')
                await message.forward(chat_id=cfg.ADMIN_ID, disable_notification=True)
                await message.delete()
                message_stopwords = await message.answer(f'üëÆüèº‚ôÇÔ∏è –ü—Ä–∏—à–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–º –±—ã–ª–∏ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞...')
                await asyncio.sleep(120)
                await message_stopwords.delete()
            else:
                pass
    else:
        await bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time() + 60)
        await message.delete()
        message_no_chat_member = await message.answer(f'@{message.from_user.username}, '
                                                      "—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @es_blog\n\n"
                                                      "–£ —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º :)\n\n"
                                                      "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: youtube.com/esblog  & instagram.com/es_blogde \n\n",
                                                      reply_markup=nav.channelMenu)

        try:
            await asyncio.sleep(60)
            await message_no_chat_member.delete()
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass


if __name__ == "__main__":
    print("bot go go go")
    executor.start_polling(dp, skip_updates=True)

